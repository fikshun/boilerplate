// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /authenticate)
	Authenticate(c *gin.Context)

	// (GET /users)
	ListUsers(c *gin.Context)

	// (POST /users)
	CreateUser(c *gin.Context)

	// (DELETE /users/{uuid})
	DeleteUser(c *gin.Context, uuid string)

	// (GET /users/{uuid})
	GetUser(c *gin.Context, uuid string)

	// (PATCH /users/{uuid})
	UpdateUser(c *gin.Context, uuid string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// Authenticate operation middleware
func (siw *ServerInterfaceWrapper) Authenticate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Authenticate(c)
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUsers(c)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", c.Param("uuid"), &uuid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter uuid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUser(c, uuid)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", c.Param("uuid"), &uuid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter uuid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c, uuid)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", c.Param("uuid"), &uuid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter uuid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c, uuid)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/authenticate", wrapper.Authenticate)
	router.GET(options.BaseURL+"/users", wrapper.ListUsers)
	router.POST(options.BaseURL+"/users", wrapper.CreateUser)
	router.DELETE(options.BaseURL+"/users/:uuid", wrapper.DeleteUser)
	router.GET(options.BaseURL+"/users/:uuid", wrapper.GetUser)
	router.PATCH(options.BaseURL+"/users/:uuid", wrapper.UpdateUser)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xXyW7bMBD9FWJaoBfZcpaTbs6CwG2BBk2MHoocGGlsMZVIhhzFMQz/e0HSsR1ZFtog",
	"iYqeHJBPs715M8wCUlVqJVGShWQBNs2x5P7PYUW5+9VGaTQk0J/ezcj9ZGhTIzQJJSGB6xxZZdF8suzz",
	"j2uIgOYaIQFLRsgpLCNwt5KX2PrtGrRjYBkBCSrckQvryke5ganbO0zJ+Tk3RpndqFOVedcTZUpOkICQ",
	"dHS4MSAk4RSNs1CitXzq0fuD8G72RzG22BAEllwUrQUIiHr2ETz2FNei57KYouzhIxneIz71ZqfKlJBA",
	"JcV9hT5KkT3LtapE9kKj2oiSm/kXnHvDmls7UyZrTWINamgDS5wq2/r5CvLSHmrsn7+s4BbRjsl2nk9V",
	"UWAaAlmAICy9zY8GJ5DAh3ijr3glrti3R83JxkzdHTeGz0NUQk7UbvYnShRodMEJ2TeNcng5YsIyzr6f",
	"X11PqoINL0ew8dYAhwge0Nhg7qA/6A9ceEqj5FpAAkf9Qf8IHP+U++xiXlGOkkTKyfOhlW2YC8MtFOOe",
	"IvB2DXeIUVbDQAQG7yu0dKKyeRCuJJTeNNe6cCihZHxnQ7lDRf+s3q6AzrowmEFCpkJ/YLWSNgj0cDB4",
	"NZ9+enqfza3KZtyy7SpmruTHrxhBGIUNIYzkAy9ExoTUFQWvB+/u1SNiV4kgQWxonwskxlkhLDE1YQFb",
	"b5+vwtJ4dfNmZNZ03pDdsBZmR1z6Id0oxVODQYQSZ81CDIhxuOpWhgdv4HNXhutKdEbWWgLxwi3pZaCt",
	"QGrYcWf+fN8UDbcr8jQ3vETy0vrZsitHZ+B2itvznHKIIGzXpwfDc5airezrD6ObHQaP9y9pP/lCllmX",
	"OmkZOT7M23ko0PNCXyD9O1UevItOutWIf3Wk+S5VY535iSYZPgpLQk6bpRFwnZL2fzxpWnvEFznrep66",
	"fzHQPDzRW5kCEsiJtE3i+Hbz8O1P+C+E5c3ydwAAAP//uojVaAAPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
