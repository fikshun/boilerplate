openapi: 3.0.3
info:
  title: Boilerplate OpenAPI
  version: 1.0.0
  description: Boilerplate OpenAPI is a RESTful API 
servers:
  - url: https://boilerplate.fake
paths:
  /authenticate:
    post:
      description: Authenticate a user
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The user was authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      description: Get a list of users
      operationId: listUsers
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCollection'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: The new user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{uuid}:
    get:
      description: Get a user by ID
      operationId: getUser
      parameters:
        - name: uuid
          in: path
          required: true
          description: The user's ID
          schema:
            type: string
      responses:
        '200':
          description: The user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: Update an existing user
      operationId: updateUser
      parameters:
        - name: uuid
          in: path
          required: true
          description: The user's ID
          schema:
              type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Delete a user
      operationId: deleteUser
      parameters:
      - name: uuid
        in: path
        required: true
        description: The user's ID
        schema:
            type: string
      responses:
        '204':
          description: The user was deleted
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Auth:
      title: AuthSchema
      type: object
      properties:
        jwt:
          type: string
          description: The user's JWT
        username:
          type: string
          description: The user's username
    Error:
      title: ErrorSchema
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
            type: string
    User:
      title: UserSchema
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-oapi-codegen-extra-tags:
            gorm: "primaryKey"
        username:
          type: string
          description: The user's name
          x-oapi-codegen-extra-tags:
            gorm: "unique"
        email:
          type: string
          description: The user's email
          x-oapi-codegen-extra-tags:
            gorm: "unique"
        password:
          type: string
          description: The user's password
        status:
          type: string
          description: The user's status
    UserCollection:
      title: UserCollectionSchema
      type: array
      items:
        $ref: '#/components/schemas/User'
